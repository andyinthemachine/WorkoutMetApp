"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var mongodb_stitch_core_sdk_1 = require("mongodb-stitch-core-sdk");
var EventSourceEventStream = (function (_super) {
    __extends(EventSourceEventStream, _super);
    function EventSourceEventStream(evtSrc, onOpen, onOpenError, reconnecter) {
        var _this = _super.call(this, reconnecter) || this;
        _this.evtSrc = evtSrc;
        _this.onOpenError = onOpenError;
        _this.openedOnce = false;
        _this.evtSrc.onopen = function (e) {
            onOpen(_this);
            _this.openedOnce = true;
        };
        _this.reset();
        return _this;
    }
    EventSourceEventStream.prototype.open = function () {
        if (this.closed) {
            throw new mongodb_stitch_core_sdk_1.StitchClientError(mongodb_stitch_core_sdk_1.StitchClientErrorCode.StreamClosed);
        }
    };
    EventSourceEventStream.prototype.reset = function () {
        var _this = this;
        this.evtSrc.onmessage = function (e) {
            _this.events.push(new mongodb_stitch_core_sdk_1.Event(mongodb_stitch_core_sdk_1.Event.MESSAGE_EVENT, e.data));
            _this.poll();
        };
        this.evtSrc.onerror = function (e) {
            if (e instanceof MessageEvent) {
                _this.lastErr = e.data;
                _this.events.push(new mongodb_stitch_core_sdk_1.Event(mongodb_stitch_core_sdk_1.StitchEvent.ERROR_EVENT_NAME, _this.lastErr));
                _this.close();
                _this.poll();
                return;
            }
            if (!_this.openedOnce) {
                _this.close();
                _this.onOpenError(new Error("event source failed to open and will not reconnect; check network log for more details"));
                return;
            }
            _this.evtSrc.close();
            _this.reconnect();
        };
    };
    EventSourceEventStream.prototype.onReconnect = function (next) {
        this.evtSrc = next.evtSrc;
        this.reset();
        this.events = next.events.concat(this.events);
    };
    EventSourceEventStream.prototype.afterClose = function () {
        this.evtSrc.close();
    };
    return EventSourceEventStream;
}(mongodb_stitch_core_sdk_1.BaseEventStream));
exports.default = EventSourceEventStream;
//# sourceMappingURL=EventSourceEventStream.js.map